version: '3.8'

services:
  # PostgreSQL 數據庫
  postgres:
    image: postgres:16-alpine
    container_name: todolist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-todolist}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-todolist123}
      POSTGRES_DB: ${POSTGRES_DB:-todolist}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-todolist}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - todolist-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: todolist-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-todolist}:${POSTGRES_PASSWORD:-todolist123}@postgres:5432/${POSTGRES_DB:-todolist}
      PORT: ${BACKEND_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - todolist-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000/api}
    container_name: todolist-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - todolist-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  todolist-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
