/**
 * Todo Entity Type Definition
 *
 * Matches the backend API response structure
 * @see .doc/API-Specification.md Section 5.1
 */
export interface Todo {
  /** UUID v4 format, automatically generated by backend */
  id: string;

  /** Todo title, required, 1-255 characters */
  title: string;

  /** Detailed description, optional, max 1000 characters */
  description?: string | null;

  /** Completion status, defaults to false */
  isCompleted: boolean;

  /** Creation timestamp in ISO 8601 format */
  createdAt: Date;

  /** Last update timestamp in ISO 8601 format, automatically updated */
  updatedAt: Date;

  /** Completion timestamp in ISO 8601 format, set when isCompleted becomes true */
  completedAt?: Date | null;
}

/**
 * Input type for creating a new Todo
 * POST /api/todos
 */
export interface CreateTodoInput {
  /** Todo title, required, 1-255 characters */
  title: string;

  /** Detailed description, optional, max 1000 characters */
  description?: string;
}

/**
 * Input type for updating an existing Todo
 * PUT /api/todos/:id
 *
 * All fields are optional (partial update)
 */
export interface UpdateTodoInput {
  /** Updated title, 1-255 characters */
  title?: string;

  /** Updated description, max 1000 characters */
  description?: string;

  /** Updated completion status */
  isCompleted?: boolean;
}

/**
 * Generic API success response wrapper
 * @template T - The data type returned in the response
 */
export interface ApiResponse<T> {
  /** Always true for successful responses */
  success: true;

  /** The response data */
  data: T;

  /** Optional success message */
  message?: string;
}

/**
 * API error response structure
 */
export interface ApiError {
  /** Always false for error responses */
  success: false;

  /** Error details */
  error: {
    /** Error code (e.g., 'VALIDATION_ERROR', 'NOT_FOUND') */
    code: string;

    /** Human-readable error message */
    message: string;

    /** Optional error details (field names, constraints, etc.) */
    details?: Record<string, unknown>;
  };
}

/**
 * Pagination metadata for list responses
 * Used with GET /api/todos
 */
export interface PaginationMeta {
  /** Total number of items */
  total: number;

  /** Current page number (1-based) */
  page: number;

  /** Number of items per page */
  limit: number;

  /** Total number of pages */
  totalPages: number;
}

/**
 * Response type for list endpoints with pagination
 */
export interface TodoListResponse extends ApiResponse<Todo[]> {
  /** Pagination metadata */
  meta?: PaginationMeta;
}

/**
 * Query parameters for GET /api/todos
 */
export interface TodoListQueryParams {
  /** Page number (1-based), default: 1 */
  page?: number;

  /** Items per page (1-100), default: 20 */
  limit?: number;

  /** Filter by completion status */
  isCompleted?: boolean;

  /** Sort by field, default: 'createdAt' */
  sortBy?: 'createdAt' | 'updatedAt' | 'title';

  /** Sort order, default: 'desc' */
  order?: 'asc' | 'desc';
}

/**
 * Filter type for local todo filtering in Zustand store
 */
export type TodoFilter = 'all' | 'active' | 'completed';

/**
 * Statistics about todos
 */
export interface TodoStats {
  /** Total number of todos */
  total: number;

  /** Number of active (incomplete) todos */
  active: number;

  /** Number of completed todos */
  completed: number;
}
