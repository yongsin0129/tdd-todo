name: CI - Quality Assurance (Non-blocking)

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  # ==================== 後端測試 ====================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: true

      - name: Generate Prisma Client
        run: npx prisma generate
        continue-on-error: true

      - name: Run integration tests
        run: npm test -- --coverage
        continue-on-error: true

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        continue-on-error: true

      - name: Archive backend test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            backend/coverage/
            backend/test-results/
          retention-days: 7
        continue-on-error: true

  # ==================== 前端測試 ====================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: true

      - name: Run unit tests
        run: npm test -- --coverage
        continue-on-error: true

      - name: Build frontend
        run: npm run build
        continue-on-error: true

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
        continue-on-error: true

      - name: Archive frontend test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
          retention-days: 7
        continue-on-error: true

  # ==================== E2E 測試 ====================
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 安裝前端依賴
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        continue-on-error: true

      # 安裝後端依賴
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        continue-on-error: true

      # 安裝 Playwright 瀏覽器
      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium
        continue-on-error: true

      # 啟動後端 API (背景執行)
      - name: Start Backend API
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma migrate deploy
          npm run build
          npm start &
          sleep 5
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          PORT: 3000
        continue-on-error: true

      # 啟動前端 (背景執行)
      - name: Start Frontend
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 5
        env:
          VITE_API_URL: http://localhost:3000
        continue-on-error: true

      # 等待服務啟動
      - name: Wait for services
        run: |
          npx wait-on http://localhost:5173 http://localhost:3000/api/todos --timeout 60000
        continue-on-error: true

      # 執行 E2E 測試
      - name: Run Playwright E2E tests
        working-directory: ./frontend
        run: npx playwright test
        continue-on-error: true

      # 上傳 Playwright 報告
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7
        continue-on-error: true

      # 上傳 E2E 測試截圖/影片
      - name: Upload E2E test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-artifacts
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7
        continue-on-error: true

  # ==================== 測試結果摘要 ====================
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate Test Summary
        run: |
          echo "## 🧪 測試結果摘要 (非阻擋模式)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **注意**: 此 CI 為非阻擋模式，測試失敗不會阻止 push" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 測試執行記錄" >> $GITHUB_STEP_SUMMARY
          echo "- 後端測試: 已執行" >> $GITHUB_STEP_SUMMARY
          echo "- 前端測試: 已執行" >> $GITHUB_STEP_SUMMARY
          echo "- E2E 測試: 已執行" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 自動部署狀態" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel: 自動部署中" >> $GITHUB_STEP_SUMMARY
          echo "- Zeabur: 自動部署中" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **查看詳細測試結果請到 Actions 頁面的 Artifacts 區塊**" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
